LDIMM R64B_1, 0; // Loading base address A
LDIMM R64B_2, 524288000; // Loading base address B
LDIMM R64B_3, 1048576000; // Loading base address C

LDIMM R64B_4, 0; // For iteration variable
LDIMM R64B_5, 0; // For offset 1
LDIMM R64B_6, 131072; // For offset 2
LDIMM R64B_7, 262144; // For offset 3
LDIMM R64B_8, 393216; // For offset 4
LDIMM R64B_9, 4000; // For number of iterations

loop:
  BREQ R64B_4, R64B_9, 23;
  LDOFF R2048L_1, R64B_1, R64B_5;
  LDOFF R2048L_2, R64B_2, R64B_5;
  LDOFF R2048L_4, R64B_1, R64B_6;
  LDOFF R2048L_5, R64B_2, R64B_6;
  LDOFF R2048L_7, R64B_1, R64B_7;
  LDOFF R2048L_8, R64B_2, R64B_7;
  LDOFF R2048L_10, R64B_1, R64B_8;
  LDOFF R2048L_11, R64B_2, R64B_8;
  COD vecAdd_2048L R2048L_3, R2048L_1, R2048L_2;
  COD vecAdd_2048L R2048L_6, R2048L_4, R2048L_5;
  COD vecAdd_2048L R2048L_9, R2048L_7, R2048L_8;
  COD vecAdd_2048L R2048L_12, R2048L_10, R2048L_11;
  STOFF R2048L_3, R64B_3, R64B_5;
  STOFF R2048L_6, R64B_3, R64B_6;
  STOFF R2048L_9, R64B_3, R64B_7;
  STOFF R2048L_12, R64B_3, R64B_8;
  ADD R64B_4, R64B_4, 4;
  ADD R64B_5, R64B_5, 524288;
  ADD R64B_6, R64B_6, 524288;
  ADD R64B_7, R64B_7, 524288;
  ADD R64B_8, R64B_8, 524288;
  JMPLBL loop;

COMMIT;